@model MovieApp.ViewModels.Admin.MovieCreateEditVM
@{
    ViewData["Title"] = "Edit Movie";
}

<div class="admin-page-header admin-fade-in">
    <h1 class="admin-page-title">Edit Movie</h1>
    <a asp-action="Index" class="admin-btn admin-btn-outline admin-btn-sm">
        <i class="fas fa-arrow-left me-1"></i> Back to List
    </a>
</div>

<div class="row mb-4 admin-fade-in-delay-1">
    <div class="col-lg-8 mx-auto">
        <div class="admin-card">
            <div class="admin-card-header">
                <h5 class="m-0 admin-widget-title">Movie Information</h5>
            </div>
            <div class="admin-card-body">
                <form asp-action="Edit" method="post" enctype="multipart/form-data" id="movieForm">
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-4"></div>
                    <input type="hidden" asp-for="Id" />
                    
                    <div class="row mb-4">
                        <div class="col-md-12">
                            <div class="admin-form-group">
                                <label asp-for="Title" class="admin-label">Title</label>
                                <input asp-for="Title" class="admin-input" placeholder="Enter movie title" />
                                <span asp-validation-for="Title" class="text-danger small"></span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="admin-form-group">
                                <label asp-for="CategoryId" class="admin-label">Category</label>
                                <select asp-for="CategoryId" class="admin-select">
                                    <option value="">-- Select Category --</option>
                                    @foreach (var category in Model.Categories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                </select>
                                <span asp-validation-for="CategoryId" class="text-danger small"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="admin-form-group">
                                <label asp-for="Status" class="admin-label">Status</label>
                                <select asp-for="Status" asp-items="Html.GetEnumSelectList<MovieApp.Models.MovieStatus>()" class="admin-select"></select>
                                <span asp-validation-for="Status" class="text-danger small"></span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="admin-form-group">
                                <label asp-for="ReleaseYear" class="admin-label">Release Year</label>
                                <input asp-for="ReleaseYear" class="admin-input" placeholder="Release Year" />
                                <span asp-validation-for="ReleaseYear" class="text-danger small"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="admin-form-group">
                                <label asp-for="DurationMinutes" class="admin-label">Duration (minutes)</label>
                                <input asp-for="DurationMinutes" class="admin-input" placeholder="Duration in minutes" />
                                <span asp-validation-for="DurationMinutes" class="text-danger small"></span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-4">
                        <div class="col-md-12">
                            <div class="admin-form-group">
                                <label asp-for="Description" class="admin-label">Description</label>
                                <textarea asp-for="Description" class="admin-input" rows="4" placeholder="Movie description"></textarea>
                                <span asp-validation-for="Description" class="text-danger small"></span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-4">
                        <div class="col-md-12">
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i> You can either keep the existing poster, provide a new URL, or upload a new image file.
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="admin-form-group">
                                <label asp-for="PosterFile" class="admin-label">Movie Poster</label>
                                <input asp-for="PosterFile" type="file" class="form-control" accept="image/*" id="posterFileInput" />
                                <span asp-validation-for="PosterFile" class="text-danger small"></span>
                                <small class="admin-text-muted">Recommended size: 800×1200px, max 2MB</small>
                                
                                @if (!string.IsNullOrEmpty(Model.PosterUrl))
                                {
                                    <div class="mt-2" id="currentPosterContainer">
                                        <p class="mb-2">Current poster:</p>
                                        <img src="@Model.PosterUrl" alt="@Model.Title" class="img-fluid shadow" style="max-height: 200px; border-radius: var(--admin-radius);" />
                                    </div>
                                }
                                <div id="posterPreview" class="mt-2"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="admin-form-group">
                                <label asp-for="PosterUrl" class="admin-label">Poster URL</label>
                                <input asp-for="PosterUrl" class="admin-input" placeholder="URL to movie poster" id="posterUrlInput" />
                                <span asp-validation-for="PosterUrl" class="text-danger small"></span>
                                <small class="admin-text-muted">If you upload a file, this URL will be replaced</small>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-4">
                        <div class="col-md-12">
                            <div class="admin-form-group">
                                <label asp-for="MovieImageFiles" class="admin-label">Add More Movie Images (Optional)</label>
                                <input name="MovieImageFiles" multiple type="file" class="form-control" accept="image/*" id="additionalImagesInput" />
                                <small class="admin-text-muted">Select multiple images to add to the movie gallery (max 5 images, 2MB each)</small>
                                <div id="imagePreviewContainer" class="mt-2 d-flex flex-wrap gap-2"></div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-4">
                        <div class="col-md-12">
                            <div class="admin-form-group">
                                <label class="admin-label">Current Movie Images</label>
                                <div id="existingImagesContainer" class="d-flex flex-wrap gap-3 mt-2">
                                    @if (Model.MovieImages != null && Model.MovieImages.Any())
                                    {
                                        foreach (var image in Model.MovieImages)
                                        {
                                            <div class="position-relative">
                                                <img src="@image.Path" alt="Movie Image" class="img-fluid shadow" 
                                                     style="height: 120px; width: 180px; object-fit: cover; border-radius: var(--admin-radius);">
                                                <button type="button" class="btn btn-danger btn-sm rounded-circle delete-image-btn" 
                                                        data-image-id="@image.Id" style="position: absolute; top: 5px; right: 5px; width: 28px; height: 28px; padding: 0;">
                                                    <i class="fas fa-times" style="font-size: 12px;"></i>
                                                </button>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <p class="admin-text-muted fst-italic">No additional images for this movie</p>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-4">
                        <div class="col-md-12">
                            <div class="admin-form-group">
                                <label asp-for="TrailerUrl" class="admin-label">Trailer URL (Optional)</label>
                                <input asp-for="TrailerUrl" class="admin-input" placeholder="YouTube or Vimeo URL" />
                                <span asp-validation-for="TrailerUrl" class="text-danger small"></span>
                                <small class="admin-text-muted">YouTube or Vimeo URL for the movie trailer</small>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-4">
                        <div class="col-md-12">
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i> Reserved tickets cannot exceed total tickets.
                            </div>
                        </div>
                    </div>

                    <div class="row mb-4">
                        <div class="col-md-4">
                            <div class="admin-form-group">
                                <label asp-for="Price" class="admin-label">Ticket Price</label>
                                <input asp-for="Price" class="admin-input" placeholder="0.00" />
                                <span asp-validation-for="Price" class="text-danger small"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="admin-form-group">
                                <label asp-for="TotalTickets" class="admin-label">Total Tickets</label>
                                <input asp-for="TotalTickets" class="admin-input" placeholder="0" id="totalTickets" />
                                <span asp-validation-for="TotalTickets" class="text-danger small"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="admin-form-group">
                                <label asp-for="ReservedTickets" class="admin-label">Reserved Tickets</label>
                                <input asp-for="ReservedTickets" class="admin-input" placeholder="0" id="reservedTickets" />
                                <span asp-validation-for="ReservedTickets" class="text-danger small"></span>
                                <span id="ticketsError" class="text-danger small"></span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-4">
                        <div class="col-md-12">
                            <div class="admin-form-group">
                                <label asp-for="CinemaId" class="admin-label">Cinema</label>
                                <select asp-for="CinemaId" class="admin-select">
                                    <option value="">-- Select Cinema --</option>
                                    @foreach (var cinema in Model.Cinemas)
                                    {
                                        <option value="@cinema.Id">@cinema.Name - @cinema.City</option>
                                    }
                                </select>
                                <span asp-validation-for="CinemaId" class="text-danger small"></span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-4">
                        <div class="col-md-12">
                            <div class="admin-form-group">
                                <label class="admin-label mb-3">Select Actors</label>
                                <div class="row">
                                    @foreach (var actor in Model.AllActors)
                                    {
                                        <div class="col-md-4 mb-2">
                                            <div class="form-check">
                                                <input type="checkbox" id="actor_@actor.Id" name="SelectedActorIds" value="@actor.Id" 
                                                       class="form-check-input" @(actor.IsSelected ? "checked" : "") />
                                                <label for="actor_@actor.Id" class="form-check-label" style="color: var(--admin-text-secondary);">
                                                    @actor.FullName
                                                </label>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="admin-btn-group">
                        <button type="submit" class="admin-btn admin-btn-primary" id="submitButton">
                            <i class="fas fa-save me-1"></i> Save Changes
                        </button>
                        <a asp-action="Index" class="admin-btn admin-btn-outline">
                            Cancel
                        </a>
                        <a asp-action="Delete" asp-route-id="@Model.Id" class="admin-btn admin-btn-danger ms-auto">
                            <i class="fas fa-trash-alt me-1"></i> Delete
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Year validation
            const yearInput = document.getElementById('ReleaseYear');
            if (yearInput) {
                yearInput.addEventListener('input', function() {
                    const currentYear = new Date().getFullYear();
                    let value = parseInt(this.value);
                    
                    if (value < 1900) {
                        this.value = 1900;
                    } else if (value > currentYear + 5) {
                        this.value = currentYear + 5;
                    }
                });
            }
            
            // Poster file preview
            const posterFileInput = document.getElementById('posterFileInput');
            const posterPreview = document.getElementById('posterPreview');
            const posterUrlInput = document.getElementById('posterUrlInput');
            const currentPosterContainer = document.getElementById('currentPosterContainer');
            
            if (posterFileInput) {
                posterFileInput.addEventListener('change', function(event) {
                    posterPreview.innerHTML = ''; // Clear previous preview
                    
                    if (event.target.files && event.target.files.length > 0) {
                        const file = event.target.files[0];
                        
                        // Check file size (max 2MB)
                        if (file.size > 2 * 1024 * 1024) {
                            alert('File size exceeds 2MB limit. Please choose a smaller file.');
                            event.target.value = '';
                            return;
                        }
                        
                        // Clear the URL field when a file is selected
                        if (posterUrlInput) {
                            posterUrlInput.value = '';
                        }
                        
                        // Hide current poster if exists
                        if (currentPosterContainer) {
                            currentPosterContainer.style.display = 'none';
                        }
                        
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            posterPreview.innerHTML = `
                                <div class="position-relative mt-2">
                                    <p class="mb-2">New poster preview:</p>
                                    <img src="${e.target.result}" alt="Poster Preview" class="img-fluid shadow" 
                                         style="max-height: 200px; border-radius: var(--admin-radius);">
                                    <div class="badge bg-success position-absolute" style="bottom: 10px; right: 10px;">
                                        <i class="fas fa-check-circle me-1"></i> Selected
                                    </div>
                                </div>
                            `;
                        }
                        reader.readAsDataURL(file);
                    }
                });
            }
            
            // When PosterUrl is changed, clear the file input and show URL preview
            if (posterUrlInput && posterFileInput) {
                posterUrlInput.addEventListener('input', function() {
                    if (this.value.trim() !== '') {
                        posterFileInput.value = '';
                        posterPreview.innerHTML = '';
                        
                        // Hide current poster if exists
                        if (currentPosterContainer) {
                            currentPosterContainer.style.display = 'none';
                        }
                        
                        // Show preview for URL if it's a valid image URL
                        const url = this.value.trim();
                        if (url.match(/\.(jpeg|jpg|gif|png)$/) != null) {
                            posterPreview.innerHTML = `
                                <div class="position-relative mt-2">
                                    <p class="mb-2">URL Preview:</p>
                                    <div class="text-center">
                                        <img src="${url}" alt="URL Preview" class="img-fluid shadow" 
                                             style="max-height: 200px; border-radius: var(--admin-radius);"
                                             onerror="this.onerror=null;this.src='';this.parentNode.innerHTML='<div class=\\'alert alert-warning mt-2\\'>Could not load image from URL. Please verify the URL is correct and publicly accessible.</div>';">
                                    </div>
                                </div>
                            `;
                        }
                    } else {
                        // If URL is cleared, show the current poster again
                        if (currentPosterContainer) {
                            currentPosterContainer.style.display = 'block';
                        }
                    }
                });
            }
            
            // Multiple images preview
            const multipleImagesInput = document.getElementById('additionalImagesInput');
            const imagePreviewContainer = document.getElementById('imagePreviewContainer');
            
            if (multipleImagesInput) {
                multipleImagesInput.addEventListener('change', function(event) {
                    // Clear previous previews
                    imagePreviewContainer.innerHTML = '';
                    
                    if (!event.target.files || event.target.files.length === 0) {
                        return;
                    }
                    
                    if (event.target.files.length > 5) {
                        alert('You can select a maximum of 5 images.');
                        event.target.value = '';
                        return;
                    }
                    
                    if (event.target.files.length > 0) {
                        imagePreviewContainer.innerHTML = '<h6 class="w-100 mb-2">Preview of new images to be added:</h6>';
                    }
                    
                    for (let i = 0; i < event.target.files.length; i++) {
                        const file = event.target.files[i];
                        
                        // Check file size (max 2MB per image)
                        if (file.size > 2 * 1024 * 1024) {
                            alert(`Image "${file.name}" exceeds 2MB limit. Please choose a smaller file.`);
                            continue;
                        }
                        
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            const div = document.createElement('div');
                            div.className = 'position-relative';
                            div.innerHTML = `
                                <div class="position-relative">
                                    <img src="${e.target.result}" alt="Image Preview ${i+1}" class="img-fluid shadow" 
                                         style="height: 120px; width: 180px; object-fit: cover; border-radius: var(--admin-radius);">
                                    <span class="position-absolute top-0 end-0 bg-primary text-white rounded-circle m-1" 
                                          style="width: 24px; height: 24px; text-align: center; line-height: 24px; font-size: 12px;">
                                        ${i+1}
                                    </span>
                                </div>
                            `;
                            imagePreviewContainer.appendChild(div);
                        }
                        reader.readAsDataURL(file);
                    }
                });
            }
            
            // Delete image functionality using AJAX
            document.querySelectorAll('.delete-image-btn').forEach(button => {
                button.addEventListener('click', function() {
                    if (confirm('Are you sure you want to delete this image?')) {
                        const imageId = this.getAttribute('data-image-id');
                        const imageContainer = this.parentElement;
                        
                        // Send AJAX request to delete the image
                        fetch(`/Admin/Movies/DeleteImage?imageId=${imageId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                // Add anti-forgery token if needed
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                            }
                        })
                        .then(response => {
                            if (response.ok) {
                                // Remove the image from the UI
                                imageContainer.remove();
                                
                                // If no images left, show the "no images" message
                                const remainingImages = document.querySelectorAll('#existingImagesContainer .position-relative');
                                if (remainingImages.length === 0) {
                                    const noImagesMsg = document.createElement('p');
                                    noImagesMsg.className = 'admin-text-muted fst-italic';
                                    noImagesMsg.textContent = 'No additional images for this movie';
                                    document.getElementById('existingImagesContainer').appendChild(noImagesMsg);
                                }
                            } else {
                                alert('Failed to delete the image. Please try again.');
                            }
                        })
                        .catch(error => {
                            console.error('Error deleting image:', error);
                            alert('An error occurred while deleting the image.');
                        });
                    }
                });
            });

            // Reserved tickets validation
            const totalTicketsInput = document.getElementById('totalTickets');
            const reservedTicketsInput = document.getElementById('reservedTickets');
            const ticketsError = document.getElementById('ticketsError');
            const form = document.getElementById('movieForm');
            const submitButton = document.getElementById('submitButton');

            function validateTickets() {
                const totalTickets = parseInt(totalTicketsInput.value) || 0;
                const reservedTickets = parseInt(reservedTicketsInput.value) || 0;
                
                if (reservedTickets > totalTickets) {
                    ticketsError.textContent = 'Reserved tickets cannot exceed total tickets';
                    return false;
                } else {
                    ticketsError.textContent = '';
                    return true;
                }
            }

            if (totalTicketsInput && reservedTicketsInput) {
                totalTicketsInput.addEventListener('input', validateTickets);
                reservedTicketsInput.addEventListener('input', validateTickets);
                
                form.addEventListener('submit', function(event) {
                    if (!validateTickets()) {
                        event.preventDefault();
                    }
                });
            }
        });
    </script>
}