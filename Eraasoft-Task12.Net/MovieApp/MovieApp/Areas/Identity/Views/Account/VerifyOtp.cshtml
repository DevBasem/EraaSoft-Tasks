@model MovieApp.ViewModels.Identity.VerifyOtpViewModel
@{
    ViewData["Title"] = "Verify Code & Reset Password";
}

<div class="identity-container">
    <div class="identity-header">
        <h1>@ViewData["Title"]</h1>
    </div>
    
    <div class="row justify-content-center">
        <div class="col-md-8">
            <form asp-action="VerifyOtp" class="identity-form" id="otpForm">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="Email" />
                <input type="hidden" asp-for="OtpCode" id="hiddenOtpCode" />
                
                <div class="text-center mb-4">
                    <i class="fas fa-key fa-3x text-primary-custom mb-3"></i>
                    <h3>Enter Verification Code</h3>
                    <p class="text-secondary">
                        We sent a 4-digit verification code to <strong>@Model.Email</strong><br>
                        Enter it below to reset your password.
                    </p>
                </div>
                
                <div class="form-group mb-4">
                    <div class="otp-field mb-4">
                        <input type="number" class="otp-input" maxlength="1" autofocus />
                        <input type="number" class="otp-input" maxlength="1" disabled />
                        <input type="number" class="otp-input" maxlength="1" disabled />
                        <input type="number" class="otp-input" maxlength="1" disabled />
                    </div>
                    <span asp-validation-for="OtpCode" id="otpError" class="text-danger d-block text-center"></span>
                </div>
                
                <div class="password-section mt-4">
                    <h4>Set New Password</h4>
                    <hr />
                    
                    <div class="form-group mb-3">
                        <label asp-for="NewPassword" class="form-label"></label>
                        <input asp-for="NewPassword" class="form-control" />
                        <span asp-validation-for="NewPassword" class="text-danger"></span>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label asp-for="ConfirmPassword" class="form-label"></label>
                        <input asp-for="ConfirmPassword" class="form-control" />
                        <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                    </div>
                </div>
                
                <button type="submit" class="identity-btn mt-4" id="verifyBtn" disabled>Reset Password</button>
                
                <div class="mt-3 text-center">
                    <p class="resend text-muted">
                        Didn't receive a code? <a asp-area="Identity" asp-controller="Account" asp-action="ForgotPassword">Request again</a>
                    </p>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .otp-field {
        flex-direction: row;
        column-gap: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 30px auto;
        max-width: 380px;
    }
    
    .otp-field input {
        height: 60px;
        width: 60px;
        border-radius: 8px;
        outline: none;
        font-size: 1.5rem;
        text-align: center;
        border: 1px solid var(--border-color);
        background-color: var(--background-elev-1);
        color: var(--text-light);
        font-weight: 600;
    }
    
    .otp-field input:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(10, 132, 255, 0.25);
    }
    
    .otp-field input::-webkit-inner-spin-button,
    .otp-field input::-webkit-outer-spin-button {
        display: none;
    }
    
    .password-section {
        padding-top: 1.5rem;
        border-top: 1px solid var(--border-color);
    }
    
    .resend {
        font-size: 14px;
    }
    
    .resend a {
        color: var(--primary-color);
        text-decoration: none;
        font-weight: 500;
    }
    
    .resend a:hover {
        text-decoration: underline;
    }
</style>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const inputs = document.querySelectorAll(".otp-input");
            const hiddenInput = document.getElementById("hiddenOtpCode");
            const verifyButton = document.getElementById("verifyBtn");
            const otpError = document.getElementById("otpError");
            const form = document.getElementById("otpForm");
            
            // Set focus to first input on load
            setTimeout(() => inputs[0].focus(), 100);
            
            // Handle paste event (for all inputs)
            inputs.forEach(input => {
                input.addEventListener("paste", function(event) {
                    event.preventDefault();
                    const pastedValue = (event.clipboardData || window.clipboardData).getData("text");
                    
                    if (pastedValue) {
                        // Remove any non-numeric characters
                        const cleanValue = pastedValue.replace(/\D/g, "").substring(0, 4);
                        
                        for (let i = 0; i < inputs.length; i++) {
                            if (i < cleanValue.length) {
                                inputs[i].value = cleanValue[i];
                                inputs[i].removeAttribute("disabled");
                            } else {
                                inputs[i].value = "";
                            }
                        }
                        
                        // Update hidden input
                        updateHiddenInput();
                        
                        // Focus last valid input or the next empty one
                        const lastIndex = Math.min(cleanValue.length, inputs.length - 1);
                        inputs[lastIndex].focus();
                    }
                });
            });
            
            // Handle input events
            inputs.forEach((input, index) => {
                input.addEventListener("input", function() {
                    // Allow only one digit
                    if (this.value.length > 1) {
                        this.value = this.value.slice(0, 1);
                    }
                    
                    // Clear any validation errors
                    otpError.textContent = "";
                    
                    // Move to next input if value is entered
                    if (this.value && index < inputs.length - 1) {
                        inputs[index + 1].removeAttribute("disabled");
                        inputs[index + 1].focus();
                    }
                    
                    updateHiddenInput();
                });
                
                input.addEventListener("keydown", function(e) {
                    // Handle backspace
                    if (e.key === "Backspace") {
                        if (this.value === "") {
                            // If current field is empty, go back and clear previous
                            if (index > 0) {
                                inputs[index - 1].focus();
                                inputs[index - 1].value = "";
                                
                                // Disable all subsequent inputs
                                for (let i = index; i < inputs.length; i++) {
                                    inputs[i].setAttribute("disabled", true);
                                    inputs[i].value = "";
                                }
                            }
                        } else {
                            // Just clear current value
                            this.value = "";
                        }
                        
                        updateHiddenInput();
                        e.preventDefault();
                    }
                    
                    // Allow tab navigation
                    if (e.key === "Tab") {
                        return;
                    }
                    
                    // Prevent non-numeric input
                    if (!/^\d$/.test(e.key) && !["Backspace", "Delete", "ArrowLeft", "ArrowRight", "Tab"].includes(e.key)) {
                        e.preventDefault();
                    }
                });
                
                // Handle focus events (for styling)
                input.addEventListener("focus", function() {
                    this.select();
                });
            });
            
            function updateHiddenInput() {
                let code = "";
                let allFilled = true;
                
                inputs.forEach(input => {
                    code += input.value;
                    if (!input.value) {
                        allFilled = false;
                    }
                });
                
                hiddenInput.value = code;
                
                // Enable/disable submit button
                if (allFilled && code.length === 4) {
                    verifyButton.removeAttribute("disabled");
                } else {
                    verifyButton.setAttribute("disabled", "disabled");
                }
            }
            
            // Form validation
            form.addEventListener("submit", function(e) {
                if (hiddenInput.value.length !== 4) {
                    e.preventDefault();
                    otpError.textContent = "Please enter a complete 4-digit code";
                    return false;
                }
            });
        });
    </script>
}